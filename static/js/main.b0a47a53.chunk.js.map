{"version":3,"sources":["logo.svg","Lista.js","Filter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Lista","react_default","a","createElement","this","props","rates","map","rate","key","currency","className","class","last","symbol","Component","Filter","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getData","axios","get","then","response","data","currentRates","keys","forEach","newCurrency","oldCourse","state","find","cur","undefined","push","setState","catch","error","console","log","onFilter","event","value","target","length","trim","toUpperCase","filter","includes","inputValue","_this2","setInterval","onChange","type","placeholder","src_Lista","App","src_Filter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0LCgBzBC,mLAZP,OACIC,EAAAC,EAAAC,cAAA,UACEC,KAAKC,MAAMC,MAAMC,IAAI,SAAAC,GAAI,OACvBP,EAAAC,EAAAC,cAAA,MAAIM,IAAKD,EAAKE,UAAd,kBACqBT,EAAAC,EAAAC,cAAA,QAAMQ,UAAWH,EAAKI,OAAQJ,EAAKK,MADxD,OAEIZ,EAAAC,EAAAC,cAAA,cAASK,EAAKE,SAAd,SAAgCF,EAAKM,OAArC,gBAPAC,8BCsILC,cAnIX,SAAAA,EAAYX,GAAO,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAd,KAAAY,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAd,KAAAc,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAlB,KAAMC,KAsCVkB,QAAU,WAENC,IAAMC,IAAI,qCACLC,KAAK,SAAAC,GAEF,IAAIC,EAAOD,EAASC,KAChBC,EAAe,GAEnBX,OAAOY,KAAKF,GAAMG,QAAQ,SAAArB,GACtB,IAAIsB,EAAc,CACdtB,SAAUA,EACVG,KAAMe,EAAKlB,GAAUG,KACrBC,OAAQc,EAAKlB,GAAUI,OACvBF,MAAO,QAOLqB,EAFUhB,EAAKiB,MAAML,aAEDM,KAAK,SAAAC,GAAG,OAAIA,EAAI1B,WAAasB,EAAYtB,gBAIjD2B,IAAdJ,IACID,EAAYnB,KAAOoB,EAAUpB,KAC7BmB,EAAYpB,MAAQ,QACboB,EAAYnB,KAAOoB,EAAUpB,KACpCmB,EAAYpB,MAAQ,MAEpBoB,EAAYpB,MAAQ,QAQ5BiB,EAAaS,KAAKN,KAItBf,EAAKsB,SAAS,CAAEV,aAAcA,MAIjCW,MAAM,SAAUC,GAEbC,QAAQC,IAAIF,MAvFLxB,EA2FnB2B,SAAW,SAACC,GACR,IAAIC,EAAQD,EAAME,OAAOD,MAEJ,IAAjBA,EAAME,QACN/B,EAAKM,UAKTuB,EAAQA,EAAMG,OAAOC,cAErB,IAAIrB,EAAeZ,EAAKiB,MAAML,aAI9BA,EAAeA,EAAasB,OAAO,SAAA3C,GAC/B,OAAOA,EAAKE,SAAS0C,SAASN,KAKlC7B,EAAKsB,SAAS,CAAEc,WAAYP,EAAOjB,aAAcA,KA3GjDZ,EAAKiB,MAAQ,CACTL,aAAc,GACdwB,WAAY,IAPDpC,mFAsBC,IAAAqC,EAAAlD,KAChBA,KAAKmB,UAELgC,YAAY,WAEsB,KAA1BD,EAAKpB,MAAMmB,YACXC,EAAK/B,WAEV,sCAyFH,OACItB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,UAGXV,EAAAC,EAAAC,cAAA,SAAO2C,MAAO1C,KAAK8B,MAAMmB,WAAYG,SAAUpD,KAAKwC,SAAUa,KAAK,OAAOC,YAAY,WAGtFzD,EAAAC,EAAAC,cAACwD,EAAD,CAAOrD,MAAOF,KAAK8B,MAAML,uBA/HpBd,aCkBN6C,MAjBf,WACE,OACE3D,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACbV,EAAAC,EAAAC,cAAA,UAAQQ,UAAU,cAChBV,EAAAC,EAAAC,cAAA,0BAIFF,EAAAC,EAAAC,cAAC0D,EAAD,QCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,KAAK,SAAAiD,GACjCA,EAAaC","file":"static/js/main.b0a47a53.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\n\r\nclass Lista extends Component {\r\n    render(){\r\n        return(\r\n            <ul>\r\n             {this.props.rates.map(rate => \r\n                <li key={rate.currency}>\r\n                    Last Rate: &nbsp;<span className={rate.class}>{rate.last}</span>&nbsp;\r\n                    <strong>{rate.currency}&nbsp; [{rate.symbol}]</strong>\r\n                </li>\r\n                )}   \r\n            </ul>\r\n        )\r\n    }\r\n}\r\nexport default Lista;\r\n","import React, { Component } from 'react';\r\nimport Lista from './Lista';\r\nimport axios from 'axios';\r\n\r\nclass Filter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n\r\n\r\n        this.state = {\r\n            currentRates: [],\r\n            inputValue: '',\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        this.getData();\r\n\r\n        setInterval(() => {\r\n\r\n            if (this.state.inputValue === '') {\r\n                this.getData();\r\n            }\r\n        }, 5000);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    getData = () => {\r\n\r\n        axios.get('https://blockchain.info/pl/ticker')\r\n            .then(response => {\r\n                // handle success\r\n                let data = response.data;\r\n                let currentRates = [];\r\n\r\n                Object.keys(data).forEach(currency => {\r\n                    let newCurrency = {\r\n                        currency: currency,\r\n                        last: data[currency].last,\r\n                        symbol: data[currency].symbol,\r\n                        class: 'blue'\r\n                    };\r\n\r\n\r\n\r\n                    const oldData = this.state.currentRates;\r\n\r\n                    const oldCourse = oldData.find(cur => cur.currency === newCurrency.currency);\r\n\r\n\r\n\r\n                    if (oldCourse !== undefined) {\r\n                        if (newCurrency.last > oldCourse.last) {\r\n                            newCurrency.class = 'green';\r\n                        } else if (newCurrency.last < oldCourse.last) {\r\n                            newCurrency.class = 'red';\r\n                        } else {\r\n                            newCurrency.class = 'blue';\r\n                        }\r\n\r\n                    }\r\n\r\n\r\n\r\n                    //console.log(currency);\r\n                    currentRates.push(newCurrency);\r\n                });\r\n\r\n\r\n                this.setState({ currentRates: currentRates });\r\n                //console.log(Object.keys(data));\r\n\r\n            })\r\n            .catch(function (error) {\r\n                // handle error\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    onFilter = (event) => {\r\n        let value = event.target.value;\r\n\r\n        if (value.length === 0) {\r\n            this.getData();\r\n        }\r\n\r\n\r\n\r\n        value = value.trim().toUpperCase();\r\n\r\n        let currentRates = this.state.currentRates;\r\n\r\n\r\n\r\n        currentRates = currentRates.filter(rate => {\r\n            return rate.currency.includes(value);\r\n        });\r\n\r\n\r\n\r\n        this.setState({ inputValue: value, currentRates: currentRates })\r\n\r\n        //console.log(value);\r\n        //console.log(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='crypto'>\r\n\r\n\r\n                <input value={this.state.inputValue} onChange={this.onFilter} type='text' placeholder='Filter' />\r\n\r\n\r\n                <Lista rates={this.state.currentRates} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Filter;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Filter from './Filter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Crypto Rate</h1>\n      </header>\n    \n\n      <Filter />\n\n    \n    \n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}